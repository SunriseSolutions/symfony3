{% extends 'base.html.twig' %}

{% block body %}
    <div id="wrapper">
        <div id="container">
            <div id="welcome">
                <h1><span><a href="http://symfony.com/doc/current/frontend/assetic.html" target="_blank">Assetic</a></span> Symfony {{ constant('Symfony\\Component\\HttpKernel\\Kernel::VERSION') }}</h1>
            </div>

            <div id="status">
                <p>
                    <svg id="icon-status" width="100" height="100" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1671 566q0 40-28 68l-724 724-136 136q-28 28-68 28t-68-28l-136-136-362-362q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 295 656-657q28-28 68-28t68 28l136 136q28 28 28 68z" fill="#759E1A"/></svg>

                    Your application is now ready. You can start working on it at:
                    <code>{{ base_dir }}</code>
                </p>
            </div>

            <div id="install-perform-basic-tasks">
                <h2>1) Install and Perform basic Tasks</h2>
                <a href="http://symfony.com/doc/current/assetic/asset_management.html" target="_blank">
                http://symfony.com/doc/current/assetic/asset_management.html
                </a>
                <ol>
                <li>Include alert.js that <button id="click-to-alert">alerts on click</button> "Hello baby" with Jquery + JqueryUI added under jquery_and_ui <strong>Named Asset</strong></li>
                <li>Include the css that <span class="make-me-red">make this red</span></li>
                <li>A more detailed guide about configuring and using Assetic filters as well as details of 
                <br/>Assetic's debug mode can be found in <a href="http://symfony.com/doc/current/frontend/assetic/uglifyjs.html" target="_blank">
                How to Minify CSS/JS Files (Using UglifyJS and UglifyCSS).</a> 
                <ul>
                    <li>UglifyJS to minify empty.js</li>
                    <li>The usage of UglifyCSS works the same way as UglifyJS. 
                    <br/>
                    First, make sure the node package is installed: 
                    <br/>
                     <code>npm install uglifycss --prefix app/Resources</code>
                     </li>
                </ul>
                </li>
                     <li><strong>Controlling the URL Used</strong> using something like <code>output='js/compiled/uglified.js'</code>
                    </li>





                <li><code>Symfony provides various cache busting implementations via the <strong>version, version_format and json_manifest_path</strong> configuration options.</code><br/>
                    <a href="http://symfony.com/doc/current/reference/configuration/framework.html#reference-framework-assets-version" target="_blank">Framework Bundle Config # assets/version </a>
                </li>
                <li>
                <strong>Dumping Asset Files in the dev Environment</strong>
                By default, each asset path generated in the dev environment is handled dynamically by Symfony. 
                If you feel like your assets are loading too slowly, follow this guide.
                    <ol>
                        <li>
                            First, tell Symfony to stop trying to process these files dynamically. Make the following change in your  <strong>config_dev.yml</strong> file:
<pre>
    <strong># app/config/config_dev.yml</strong>
    assetic:
        use_controller: false
</pre>
                        </li>
                        <li>
                            Next, since Symfony is no longer generating these assets for you, you'll need to dump them manually. To do so, run the following command:
                            <strong>php bin/console assetic:dump</strong>
                        </li>
                        <li>
                            By using the assetic:watch command, assets will be regenerated automatically as they change:
                            <strong>php bin/console assetic:watch</strong>
                            The assetic:watch command was introduced in AsseticBundle 2.4. In prior versions, you had to use the --watch option of the assetic:dump command for the same behavior.    
                        </li>
                    </ol>
                </li>
                </ol>
                </div>

            <div id="apply-an-assetic-filter-to-a-specific-file-ext">
            <h2>2) How to Apply an Assetic Filter to a specific File Extension</h2>
            <a href="http://symfony.com/doc/current/frontend/assetic/apply_to_option.html" target="_blank">http://symfony.com/doc/current/frontend/assetic/apply_to_option.html</a>
            <ol>
                <li>
                Install coffeescript for demo's sake.
                <br/>
                npm install coffeescript --prefix app/Resources
                </li>
                <li>
                <strong>Filter a single File</strong>
                You can now serve up a single CoffeeScript file as JavaScript from within your templates:
                <br/>
                The number sequence below are printed from coffee1.coffee
                <br/>
                <strong><span id="coffee1"></span></strong>
                </li>
            </ol>            
            </div>
            <div id="how-to-use-assetic-for-asset-management">
            <h2>3) How to Use Assetic for Asset Management</h2>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}

{% stylesheets 'bundles/app/css/*' filter='cssrewrite' %}
        <link rel="stylesheet" href="{{ asset_url }}" />
{% endstylesheets %}


{% stylesheets 'bundles/app/css/to-be-minified/*' filter='uglifycss' filter='cssrewrite' %}
     <link rel="stylesheet" href="{{ asset_url }}" />
{% endstylesheets %}

{% endblock stylesheets %}

{% block javascripts %}
    {% javascripts 
    '@AppBundle/Resources/public/js/*'
    '@jquery_and_ui'
     %}
        <script src="{{ asset_url }}"></script>
    {% endjavascripts %}

    {% javascripts '@AppBundle/Resources/public/js/to-be-minified/*' filter='uglifyjs' output='js/compiled/uglified.js' %}
    <script src="{{ asset_url }}"></script>
    {% endjavascripts %}

{% javascripts '@AppBundle/Resources/public/js/coffee/coffee1.coffee' filter='coffee' %}
    <script src="{{ asset_url }}"></script>
{% endjavascripts %}

{% endblock %}